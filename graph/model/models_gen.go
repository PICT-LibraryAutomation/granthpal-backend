// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Author struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Books []*Book `json:"books"`
}

type Book struct {
	ID        string        `json:"id"`
	Meta      *BookMetadata `json:"meta"`
	IssueInfo *IssueInfo    `json:"issueInfo,omitempty"`
}

type BookMetadata struct {
	ID            string       `json:"id"`
	Name          string       `json:"name"`
	Abstract      string       `json:"abstract"`
	AuthorIDs     []string     `json:"authorIDs"`
	Authors       []*Author    `json:"authors"`
	PublicationID string       `json:"publicationID"`
	Publication   *Publication `json:"publication"`
}

type IssueInfo struct {
	ID         string    `json:"id"`
	BookID     string    `json:"bookID"`
	Book       *Book     `json:"book"`
	IssuedByID string    `json:"issuedByID"`
	IssuedBy   *User     `json:"issuedBy"`
	IssueDate  time.Time `json:"issueDate"`
	ReturnDate time.Time `json:"returnDate"`
	Complete   bool      `json:"complete"`
	Payment    int       `json:"payment"`
}

type Publication struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Books []*Book `json:"books"`
}

type User struct {
	ID           string       `json:"id"`
	PasswordHash string       `json:"passwordHash"`
	Kind         UserKind     `json:"kind"`
	Name         string       `json:"name"`
	Phone        string       `json:"phone"`
	Prn          string       `json:"prn"`
	IssuedBooks  []*IssueInfo `json:"issuedBooks"`
}

type UserKind string

const (
	UserKindStudent      UserKind = "STUDENT"
	UserKindFaculty      UserKind = "FACULTY"
	UserKindLibraryStaff UserKind = "LIBRARY_STAFF"
)

var AllUserKind = []UserKind{
	UserKindStudent,
	UserKindFaculty,
	UserKindLibraryStaff,
}

func (e UserKind) IsValid() bool {
	switch e {
	case UserKindStudent, UserKindFaculty, UserKindLibraryStaff:
		return true
	}
	return false
}

func (e UserKind) String() string {
	return string(e)
}

func (e *UserKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserKind", str)
	}
	return nil
}

func (e UserKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
