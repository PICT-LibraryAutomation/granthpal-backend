package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"dario.cat/mergo"
	"github.com/PICT-LibraryAutomation/granthpal/database/models"
	"github.com/PICT-LibraryAutomation/granthpal/graph"
	"github.com/PICT-LibraryAutomation/granthpal/utils"
	"github.com/google/uuid"
)

// Books is the resolver for the books field.
func (r *authorResolver) Books(ctx context.Context, obj *graph.Author) ([]*graph.BookMetadata, error) {
	var books []models.BookMetadata
	err := r.DB.Model(&models.Author{ID: obj.ID}).Association("Books").Find(&books)
	if err != nil {
		return nil, err
	}

	return utils.Map(books, func(book models.BookMetadata) *graph.BookMetadata {
		return book.ToGraphModel()
	}), nil
}

// AddAuthor is the resolver for the addAuthor field.
func (r *mutationResolver) AddAuthor(ctx context.Context, inp graph.AddAuthorInp) (*graph.Author, error) {
	author := models.Author{
		ID:   uuid.NewString(),
		Name: inp.Name,
	}
	if err := r.DB.Create(&author).Error; err != nil {
		return nil, err
	}

	return author.ToGraphModel(), nil
}

// RemoveAuthor is the resolver for the removeAuthor field.
func (r *mutationResolver) RemoveAuthor(ctx context.Context, id string) (*string, error) {
	if err := r.DB.Delete(&models.Author{ID: id}).Error; err != nil {
		return nil, err
	}
	return &id, nil
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, inp graph.UpdateAuthorInp) (*graph.Author, error) {
	var author models.Author
	if err := r.DB.First(&author, "id = ?", inp.ID).Error; err != nil {
		return nil, err
	}

	mergo.Merge(&author, inp)
	r.DB.Save(&author)

	return author.ToGraphModel(), nil
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, id string) (*graph.Author, error) {
	var author models.Author
	if err := r.DB.First(&author, "id = ?", id).Error; err != nil {
		return nil, err
	}

	return author.ToGraphModel(), nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*graph.Author, error) {
	var authors []models.Author
	if err := r.DB.Find(&authors).Error; err != nil {
		return nil, err
	}

	return utils.Map(authors, func(author models.Author) *graph.Author {
		return author.ToGraphModel()
	}), nil
}

// Author returns graph.AuthorResolver implementation.
func (r *Resolver) Author() graph.AuthorResolver { return &authorResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type authorResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
