package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/PICT-LibraryAutomation/granthpal/database/models"
	"github.com/PICT-LibraryAutomation/granthpal/graph"
	"github.com/PICT-LibraryAutomation/granthpal/utils"
	"github.com/google/uuid"
)

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, inp graph.CreateTagInp) (*graph.Tag, error) {
	tag := models.Tag{
		ID:   uuid.NewString(),
		Name: inp.Name,
	}
	if err := r.DB.Create(&tag).Error; err != nil {
		return nil, err
	}

	return tag.ToGraphModel(), nil
}

// RemoveTag is the resolver for the removeTag field.
func (r *mutationResolver) RemoveTag(ctx context.Context, inp graph.RemoveTagInp) (*string, error) {
	if err := r.DB.Delete(&models.Tag{ID: inp.ID}).Error; err != nil {
		return nil, err
	}
	return &inp.ID, nil
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id string) (*graph.Tag, error) {
	var tag models.Tag
	if err := r.DB.Find(&tag, "id = ?", id).Error; err != nil {
		return nil, err
	}

	return tag.ToGraphModel(), nil
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*graph.Tag, error) {
	var tags []models.Tag
	if err := r.DB.Find(&tags).Error; err != nil {
		return nil, err
	}

	return utils.Map(tags, func(tag models.Tag) *graph.Tag {
		return tag.ToGraphModel()
	}), nil
}

// BookMetas is the resolver for the bookMetas field.
func (r *tagResolver) BookMetas(ctx context.Context, obj *graph.Tag) ([]*graph.BookMetadata, error) {
	var bookMetas []models.BookMetadata
	err := r.DB.Model(&models.Tag{ID: obj.ID}).Association("BookMetas").Find(&bookMetas)
	if err != nil {
		return nil, err
	}

	return utils.Map(bookMetas, func(meta models.BookMetadata) *graph.BookMetadata {
		return meta.ToGraphModel()
	}), nil
}

// Tag returns graph.TagResolver implementation.
func (r *Resolver) Tag() graph.TagResolver { return &tagResolver{r} }

type tagResolver struct{ *Resolver }
