package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/PICT-LibraryAutomation/granthpal/database/models"
	"github.com/PICT-LibraryAutomation/granthpal/graph"
	"github.com/PICT-LibraryAutomation/granthpal/utils"
)

// Books is the resolver for the books field.
func (r *publisherResolver) Books(ctx context.Context, obj *graph.Publisher) ([]*graph.BookMetadata, error) {
	var books []models.BookMetadata
	if err := r.DB.Find(&books, "publisher_id = ?", obj.ID).Error; err != nil {
		return nil, err
	}

	return utils.Map(books, func(book models.BookMetadata) *graph.BookMetadata {
		return book.ToGraphModel()
	}), nil
}

// Publisher is the resolver for the publisher field.
func (r *queryResolver) Publisher(ctx context.Context, id string) (*graph.Publisher, error) {
	var publisher models.Publisher
	if err := r.DB.First(&publisher, "id = ?", id).Error; err != nil {
		return nil, err
	}

	return publisher.ToGraphModel(), nil
}

// Publishers is the resolver for the publishers field.
func (r *queryResolver) Publishers(ctx context.Context) ([]*graph.Publisher, error) {
	var publishers []models.Publisher
	if err := r.DB.Find(&publishers).Error; err != nil {
		return nil, err
	}

	return utils.Map(publishers, func(publisher models.Publisher) *graph.Publisher {
		return publisher.ToGraphModel()
	}), nil
}

// Publisher returns graph.PublisherResolver implementation.
func (r *Resolver) Publisher() graph.PublisherResolver { return &publisherResolver{r} }

type publisherResolver struct{ *Resolver }
