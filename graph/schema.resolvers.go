package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	dbModels "github.com/PICT-LibraryAutomation/granthpal/database/models"
	"github.com/PICT-LibraryAutomation/granthpal/graph/model"
	"github.com/PICT-LibraryAutomation/granthpal/utils"
	"go.mongodb.org/mongo-driver/bson"
)

// Books is the resolver for the books field.
func (r *authorResolver) Books(ctx context.Context, obj *model.Author) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// MetaID is the resolver for the metaID field.
func (r *bookResolver) MetaID(ctx context.Context, obj *model.Book) (string, error) {
	panic(fmt.Errorf("not implemented: MetaID - metaID"))
}

// IssueInfo is the resolver for the issueInfo field.
func (r *bookResolver) IssueInfo(ctx context.Context, obj *model.Book) (*model.IssueInfo, error) {
	panic(fmt.Errorf("not implemented: IssueInfo - issueInfo"))
}

// Authors is the resolver for the authors field.
func (r *bookMetadataResolver) Authors(ctx context.Context, obj *model.BookMetadata) ([]*model.Author, error) {
	panic(fmt.Errorf("not implemented: Authors - authors"))
}

// Publication is the resolver for the publication field.
func (r *bookMetadataResolver) Publication(ctx context.Context, obj *model.BookMetadata) (*model.Publication, error) {
	panic(fmt.Errorf("not implemented: Publication - publication"))
}

// Books is the resolver for the books field.
func (r *bookMetadataResolver) Books(ctx context.Context, obj *model.BookMetadata) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Book is the resolver for the book field.
func (r *issueInfoResolver) Book(ctx context.Context, obj *model.IssueInfo) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// IssuedBy is the resolver for the issuedBy field.
func (r *issueInfoResolver) IssuedBy(ctx context.Context, obj *model.IssueInfo) (*model.User, error) {
	panic(fmt.Errorf("not implemented: IssuedBy - issuedBy"))
}

// Books is the resolver for the books field.
func (r *publicationResolver) Books(ctx context.Context, obj *model.Publication) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := dbModels.GetUsers(ctx, r.db, bson.M{})
	if err != nil {
		return nil, err
	}

	return utils.Map(users, func(user *dbModels.UserModel) *model.User {
		return &model.User{
			ID:           user.ID.Hex(),
			PasswordHash: user.PasswordHash,
			Kind:         user.Kind,
			Name:         user.Name,
			Phone:        user.Phone,
			Prn:          user.PRN,
		}
	}), nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	books, err := dbModels.GetBooks(ctx, r.db, bson.M{})
	if err != nil {
		return nil, err
	}

	return utils.Map(books, func(book *dbModels.BookModel) *model.Book {
		return &model.Book{
			ID:     book.ID.Hex(),
			MetaID: book.MetaID,
		}
	}), nil
}

// BookMetas is the resolver for the bookMetas field.
func (r *queryResolver) BookMetas(ctx context.Context) ([]*model.BookMetadata, error) {
	bookMetas, err := dbModels.GetBookMetas(ctx, r.db, bson.M{})
	if err != nil {
		return nil, err
	}

	return utils.Map(bookMetas, func(bookMeta *dbModels.BookMetadataModel) *model.BookMetadata {
		return &model.BookMetadata{
			ID:            bookMeta.ID.Hex(),
			Name:          bookMeta.Name,
			Abstract:      bookMeta.Abstract,
			AuthorIDs:     bookMeta.AuthorIDs,
			PublicationID: &bookMeta.PublicationID,
		}
	}), nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	authors, err := dbModels.GetAuthors(ctx, r.db, bson.M{})
	if err != nil {
		return nil, err
	}

	return utils.Map(authors, func(author *dbModels.AuthorModel) *model.Author {
		return &model.Author{
			ID:   author.ID.Hex(),
			Name: author.Name,
		}
	}), nil
}

// Publications is the resolver for the publications field.
func (r *queryResolver) Publications(ctx context.Context) ([]*model.Publication, error) {
	publications, err := dbModels.GetPublications(ctx, r.db, bson.M{})
	if err != nil {
		return nil, err
	}

	return utils.Map(publications, func(publication *dbModels.PublicationModel) *model.Publication {
		return &model.Publication{
			ID:   publication.ID.Hex(),
			Name: publication.Name,
		}
	}), nil
}

// IssuedBooks is the resolver for the issuedBooks field.
func (r *queryResolver) IssuedBooks(ctx context.Context) ([]*model.IssueInfo, error) {
	panic(fmt.Errorf("not implemented: IssuedBooks - issuedBooks"))
}

// IssuedBooks is the resolver for the issuedBooks field.
func (r *userResolver) IssuedBooks(ctx context.Context, obj *model.User) ([]*model.IssueInfo, error) {
	panic(fmt.Errorf("not implemented: IssuedBooks - issuedBooks"))
}

// Author returns AuthorResolver implementation.
func (r *Resolver) Author() AuthorResolver { return &authorResolver{r} }

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// BookMetadata returns BookMetadataResolver implementation.
func (r *Resolver) BookMetadata() BookMetadataResolver { return &bookMetadataResolver{r} }

// IssueInfo returns IssueInfoResolver implementation.
func (r *Resolver) IssueInfo() IssueInfoResolver { return &issueInfoResolver{r} }

// Publication returns PublicationResolver implementation.
func (r *Resolver) Publication() PublicationResolver { return &publicationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type authorResolver struct{ *Resolver }
type bookResolver struct{ *Resolver }
type bookMetadataResolver struct{ *Resolver }
type issueInfoResolver struct{ *Resolver }
type publicationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
